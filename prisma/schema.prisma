// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Whenever you update your Prisma schema, you will need to run the prisma db push command to create new indexes and regenerate Prisma Client.

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Add your MongoDB URI to .env
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  phoneNumber     String?  @unique
  passwordHash    String
  resetToken      String?
  resetTokenExpiry DateTime?
  isVerified      Boolean  @default(false)
  role            String   @default("USER")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Order           Order[]
}

model Admin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String?         // Made optional for migration
  packageId       String          @unique
  phoneNumber     String?
  size            OrderSize?      // Made optional for migration
  status          OrderStatus?    // Made optional for migration
  isShipped       Boolean         @default(false)
  isDamaged       Boolean         @default(false)  // New field for damaged items
  damageDescription String?       // Description of damage if isDamaged is true
  statusHistory   StatusHistory[]
  createdAt       DateTime        @default(now())
  deliveryCost    Float?
  orderDetails    OrderDetails?
}

model OrderDetails {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String   @unique @db.ObjectId
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  totalQuantity     Int
  shippedQuantity   Int
  largeItemQuantity Int
  smallItemQuantity Int
  priceRMB          Float
  priceTonggur      Float
  deliveryAvailable Boolean
  comments          String?
  createdAt         DateTime @default(now())
}

model StatusHistory {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  status    OrderStatus
  timestamp DateTime    @default(now())
  orderId   String      @db.ObjectId
  order     Order       @relation(fields: [orderId], references: [id])
  
  // Add employee who made the status change
  employeeId String?    @db.ObjectId
  employee   Employee?  @relation("EmployeeStatusUpdates", fields: [employeeId], references: [id])
}

model Employee {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  passwordHash String
  phoneNumber  String?
  role         EmployeeRole
  isActive     Boolean      @default(true)
  address      String?
  joinDate     DateTime     @default(now())
  lastLogin    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  statusUpdates StatusHistory[] @relation("EmployeeStatusUpdates")
}

enum OrderSize {
  LARGE
  MEDIUM
  SMALL
  UNDEFINED
}

enum OrderStatus {
  IN_WAREHOUSE
  IN_TRANSIT
  IN_UB
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum EmployeeRole {
  MANAGER
  DELIVERY
}
